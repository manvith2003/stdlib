/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var invalid = [];
var test;

test = {
	'code': [
		'function fizzBuzz() {',
		'	var i;',
		'	var out;',
		'',
		'	for ( i = 1; i <= 100; i++ ) {',
		'		out = ( i % 5 === 0 ) ? "Buzz" : ( i % 3 === 0 ) ? "Fizz" : i;',
		'		console.log( out );',
		'	}',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Variable declarations inside of function are not ordered by length (in decreasing order)',
			'type': null
		}
	],
	'output': [
		'function fizzBuzz() {',
		'	var out;',
		'	var i;',
		'',
		'	for ( i = 1; i <= 100; i++ ) {',
		'		out = ( i % 5 === 0 ) ? "Buzz" : ( i % 3 === 0 ) ? "Fizz" : i;',
		'		console.log( out );',
		'	}',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'function addFour( y ) {',
		'	var x = 4.0;',
		'	var out = x + y;',
		'	return out;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Variable declarations inside of function are not ordered by length (in decreasing order)',
			'type': null
		}
	],
	'output': [
		'function addFour( y ) {',
		'	var out = x + y;',
		'	var x = 4.0;',
		'	return out;',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a pseudorandom number drawn from a triangular distribution with minimum support `a`, maximum support `b` and mode `c`.',
		'*',
		'* @private',
		'* @param {Function} rand - PRNG for generating uniformly distributed numbers',
		'* @param {number} a - minimum support',
		'* @param {number} b - maximum support',
		'* @param {number} c - mode',
		'* @returns {number} pseudorandom number',
		'*/',
		'function triangular( rand, a, b, c ) {',
		'	var x;',
		'	var fc;',
		'	var u;',
		'	fc = (c - a) / (b - a);',
		'	u = rand();',
		'	if ( u < fc ) {',
		'		x = (b - a) * (c - a);',
		'		return a + sqrt( x * u );',
		'	}',
		'	x = (b - a) * (b - c);',
		'	return b - sqrt( x * (1.0 - u) );',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Variable declarations inside of function are not ordered by length (in decreasing order)',
			'type': null
		}
	],
	'output': [
		'/**',
		'* Returns a pseudorandom number drawn from a triangular distribution with minimum support `a`, maximum support `b` and mode `c`.',
		'*',
		'* @private',
		'* @param {Function} rand - PRNG for generating uniformly distributed numbers',
		'* @param {number} a - minimum support',
		'* @param {number} b - maximum support',
		'* @param {number} c - mode',
		'* @returns {number} pseudorandom number',
		'*/',
		'function triangular( rand, a, b, c ) {',
		'	var fc;',
		'	var x;',
		'	var u;',
		'	fc = (c - a) / (b - a);',
		'	u = rand();',
		'	if ( u < fc ) {',
		'		x = (b - a) * (c - a);',
		'		return a + sqrt( x * u );',
		'	}',
		'	x = (b - a) * (b - c);',
		'	return b - sqrt( x * (1.0 - u) );',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'function addFour( y ) {',
		'	var x = 4.0;',
		'	var out = x + y;',
		'	return out;',
		'}'
	].join( '\n' ),
	'options': [{
		'order': 'decreasing'
	}],
	'errors': [
		{
			'message': 'Variable declarations inside of function are not ordered by length (in decreasing order)',
			'type': null
		}
	],
	'output': [
		'function addFour( y ) {',
		'	var out = x + y;',
		'	var x = 4.0;',
		'	return out;',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a pseudorandom number drawn from a triangular distribution with minimum support `a`, maximum support `b` and mode `c`.',
		'*',
		'* @private',
		'* @param {Function} rand - PRNG for generating uniformly distributed numbers',
		'* @param {number} a - minimum support',
		'* @param {number} b - maximum support',
		'* @param {number} c - mode',
		'* @returns {number} pseudorandom number',
		'*/',
		'function triangular( rand, a, b, c ) {',
		'	var fc;',
		'	var x;',
		'	var u;',
		'	fc = (c - a) / (b - a);',
		'	u = rand();',
		'	if ( u < fc ) {',
		'		x = (b - a) * (c - a);',
		'		return a + sqrt( x * u );',
		'	}',
		'	x = (b - a) * (b - c);',
		'	return b - sqrt( x * (1.0 - u) );',
		'}'
	].join( '\n' ),
	'options': [{
		'order': 'increasing'
	}],
	'errors': [
		{
			'message': 'Variable declarations inside of function are not ordered by length (in increasing order)',
			'type': null
		}
	],
	'output': [
		'/**',
		'* Returns a pseudorandom number drawn from a triangular distribution with minimum support `a`, maximum support `b` and mode `c`.',
		'*',
		'* @private',
		'* @param {Function} rand - PRNG for generating uniformly distributed numbers',
		'* @param {number} a - minimum support',
		'* @param {number} b - maximum support',
		'* @param {number} c - mode',
		'* @returns {number} pseudorandom number',
		'*/',
		'function triangular( rand, a, b, c ) {',
		'	var x;',
		'	var u;',
		'	var fc;',
		'	fc = (c - a) / (b - a);',
		'	u = rand();',
		'	if ( u < fc ) {',
		'		x = (b - a) * (c - a);',
		'		return a + sqrt( x * u );',
		'	}',
		'	x = (b - a) * (b - c);',
		'	return b - sqrt( x * (1.0 - u) );',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'function outer() {',
		'	var xyz;',
		'	var x;',
		'	function inner() {',
		'		var a = 10;',
		'		var abc = 5;',
		'		var ab = 5;',
		'		return a + b + c;',
		'	}',
		'	xyz = inner() + x;',
		'	return xyz;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Variable declarations inside of function are not ordered by length (in decreasing order)',
			'type': null
		}
	],
	'output': [
		'function outer() {',
		'	var xyz;',
		'	var x;',
		'	function inner() {',
		'		var abc = 5;',
		'		var ab = 5;',
		'		var a = 10;',
		'		return a + b + c;',
		'	}',
		'	xyz = inner() + x;',
		'	return xyz;',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'function outer() {',
		'	var xyz;',
		'	var x;',
		'	function inner() {',
		'		var abc = 5;',
		'		var ab = 5;',
		'		var a = 10;',
		'		return a + b + c;',
		'	}',
		'	xyz = inner() + x;',
		'	return xyz;',
		'}'
	].join( '\n' ),
	'options': [{
		'order': 'increasing'
	}],
	'errors': [
		{
			'message': 'Variable declarations inside of function are not ordered by length (in increasing order)',
			'type': null
		},
		{
			'message': 'Variable declarations inside of function are not ordered by length (in increasing order)',
			'type': null
		}
	],
	'output': [
		'function outer() {',
		'	var x;',
		'	var xyz;',
		'	function inner() {',
		'		var a = 10;',
		'		var ab = 5;',
		'		var abc = 5;',
		'		return a + b + c;',
		'	}',
		'	xyz = inner() + x;',
		'	return xyz;',
		'}'
	].join( '\n' )
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
